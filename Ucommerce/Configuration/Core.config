<!--
	Core configuration for Ucommerce components.
-->
<configuration>

    <components>

        <component
                id="TextSanitizer"
                service="Ucommerce.Security.ITextSanitizer, Ucommerce"
                type="Ucommerce.SystemWeb.Security.TextSanitizer, Ucommerce.SystemWeb"/>

        <component
                id="HtmlSanitizer"
                service="Ucommerce.Security.IHtmlSanitizer, Ucommerce"
                type="Ucommerce.SystemWeb.Security.HtmlSanitizer, Ucommerce.SystemWeb"/>

        <component
                id="CatalogConfiguration"
                service="Ucommerce.Infrastructure.Configuration.CatalogConfiguration, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Configuration.CatalogConfiguration, Ucommerce.Infrastructure">
            <parameters>
                <DefaultCultureCode>#{defaultCultureCode}</DefaultCultureCode>
                <EnforceCategoryNameUniquenessWithinCatalogs>#{enforceCategoryNameUniquenessWithinCatalogs}
                </EnforceCategoryNameUniquenessWithinCatalogs>
            </parameters>
        </component>

        <!-- Data Access -->
        <component
                id="SessionProvider"
                service="Ucommerce.EntitiesV2.ISessionProvider, Ucommerce"
                type="Ucommerce.EntitiesV2.SessionProvider, Ucommerce">
            <parameters>
                <EnableCache>#{enableCache}</EnableCache>
                <CacheProvider>#{cacheProvider}</CacheProvider>
                <ConnectionIsolation>#{databaseConnectionIsolationLevel}</ConnectionIsolation>
            </parameters>
            <interceptors>
                <interceptor>${ExceptionLoggingInterceptor}</interceptor>
            </interceptors>
        </component>

        <component
                id="ConnectionStringLocator"
                service="Ucommerce.Infrastructure.Configuration.IConnectionStringLocator, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Configuration.ConnectionStringLocator, Ucommerce.Infrastructure">
            <parameters>
                <connectionString>#{connectionString}</connectionString>
            </parameters>
        </component>

        <component
                id="StatelessSessionProvider"
                service="Ucommerce.EntitiesV2.IStatelessSessionProvider, Ucommerce"
                type="Ucommerce.EntitiesV2.SessionProvider, Ucommerce">
            <parameters>
                <EnableCache>#{enableCache}</EnableCache>
                <CacheProvider>#{cacheProvider}</CacheProvider>
                <ConnectionIsolation>#{databaseConnectionIsolationLevel}</ConnectionIsolation>
            </parameters>
            <interceptors>
                <interceptor>${ExceptionLoggingInterceptor}</interceptor>
            </interceptors>
        </component>

        <component
                id="CacheProvider"
                service="Ucommerce.EntitiesV2.ICacheProvider, Ucommerce"
                type="Ucommerce.EntitiesV2.CacheProvider, Ucommerce"/>

        <component
                id="Ucommerce.CoreDataMappings"
                service="Ucommerce.EntitiesV2.IContainsNHibernateMappingsTag, Ucommerce"
                type="Ucommerce.EntitiesV2.MappingAssemblyTag, Ucommerce"/>

        <component
                id="Repository"
                service="Ucommerce.EntitiesV2.IRepository`1, Ucommerce"
                type="Ucommerce.EntitiesV2.Repository`1, Ucommerce"/>

        <component
                id="SoftDeletableRepository"
                service="Ucommerce.EntitiesV2.ISoftDeletableRepository`1, Ucommerce"
                type="Ucommerce.EntitiesV2.SoftDeletableRepository`1, Ucommerce"/>


        <!-- Ucommerce.Api -->

        <component
                id="ApiCatalogLibrary"
                service="Ucommerce.Api.ICatalogLibrary, Ucommerce.Api"
                type="Ucommerce.Api.CatalogLibrary, Ucommerce.Api"/>

        <component
                id="ApiTransactionLibrary"
                service="Ucommerce.Api.ITransactionLibrary, Ucommerce.Api"
                type="Ucommerce.Api.TransactionLibrary, Ucommerce.Api"/>

        <component
                id="SearchSlugService"
                service="Ucommerce.Search.Slugs.ISlugService, Ucommerce.Search"
                type="Ucommerce.Search.Slugs.SlugService, Ucommerce.Search"/>

        <component
                id="SearchUrlService"
                service="Ucommerce.Search.Slugs.IUrlService, Ucommerce.Search"
                type="Ucommerce.Search.Slugs.UrlService, Ucommerce.Search"/>

        <component
                id="CookieBasketPersistence"

                service="Ucommerce.Api.Order.CookieBasketPersistence, Ucommerce.Api"
                type="Ucommerce.Api.Order.CookieBasketPersistence, Ucommerce.Api"/>

        <component
                id="ApiProductPriceCalculationService"
                service="Ucommerce.Catalog.IProductPriceCalculationService, Ucommerce"
                type="Ucommerce.Api.PriceCalculation.DiscountAppliedProductPriceCalculationService, Ucommerce.Api"/>

        <component
                id="ApiNoDiscountProductPriceCalculationService"
                service="Ucommerce.Catalog.IProductPriceCalculationService, Ucommerce"
                type="Ucommerce.Api.PriceCalculation.ProductPriceCalculationService, Ucommerce.Api"/>

        <!-- Internal libraries-->

        <component
                id="MarketingLibrary"
                service="Ucommerce.Api.IMarketingLibrary, Ucommerce.Api"
                type="Ucommerce.Api.MarketingLibrary, Ucommerce.Api">
            <interceptors>
                <interceptor>${ExceptionLoggingInterceptor}</interceptor>
            </interceptors>
        </component>


        <!-- Interceptors -->
        <component
                id="ExceptionLoggingInterceptor"
                service="Ucommerce.Infrastructure.Interceptor.ExceptionLoggingInterceptor, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Interceptor.ExceptionLoggingInterceptor, Ucommerce.Infrastructure"/>

        <component
                id="XmlExceptionInterceptor"
                service="Ucommerce.Xslt.Interceptors.XmlExceptionInterceptor, Ucommerce.Infrastructure"
                type="Ucommerce.Xslt.Interceptors.XmlExceptionInterceptor, Ucommerce.Infrastructure"/>

        <component
                id="TimingInterceptor"
                service="Ucommerce.Infrastructure.Interceptor.TimingInterceptor, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Interceptor.TimingInterceptor, Ucommerce.Infrastructure"/>

        <!-- Context API -->

        <component
                id="CatalogContext"
                service="Ucommerce.Api.ICatalogContext, Ucommerce.Api"
                type="Ucommerce.Api.CatalogContext, Ucommerce.Api"/>

        <component
                id="OrderContext"
                service="Ucommerce.Api.IOrderContext, Ucommerce.Api"
                type="Ucommerce.Api.OrderContext, Ucommerce.Api"/>

        <component
                id="LocalizationContext"
                service="Ucommerce.Infrastructure.Globalization.ILocalizationContext, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Globalization.Globalization, Ucommerce.Infrastructure">
            <parameters>
                <DefaultCultureCode>#{defaultCultureCode}</DefaultCultureCode>
            </parameters>
        </component>

        <!-- Services -->
        <component
                id="OrderService"
                service="Ucommerce.Transactions.IOrderService, Ucommerce"
                type="Ucommerce.Transactions.OrderService, Ucommerce"/>

        <component
                id="TaxService"
                service="Ucommerce.Catalog.ITaxService, Ucommerce"
                type="Ucommerce.Catalog.TaxService, Ucommerce"/>

        <component
                id="UrlService"
                service="Ucommerce.Catalog.IUrlService, Ucommerce"
                type="Ucommerce.Catalog.UrlService, Ucommerce"/>

        <component
                id="ProductReviewService"
                service="Ucommerce.Catalog.ProductReviewService, Ucommerce"
                type="Ucommerce.Catalog.ProductReviewService, Ucommerce"/>

        <component
                id="EmailService"
                service="Ucommerce.Transactions.IEmailService, Ucommerce"
                type="Ucommerce.Transactions.EmailService, Ucommerce"/>

        <component
                id="NumberSeriesService"
                service="Ucommerce.Transactions.INumberSeriesService, Ucommerce"
                type="Ucommerce.Transactions.NumberSeriesService, Ucommerce"/>

        <component
                id="RoundingService"
                service="Ucommerce.Transactions.IRoundingService, Ucommerce"
                type="Ucommerce.Transactions.RoundingService, Ucommerce"/>

        <component
                id="AbsoluteUrlService"
                service="Ucommerce.Web.IAbsoluteUrlService, Ucommerce"
                type="Ucommerce.Web.Impl.AbsoluteUrlService, Ucommerce">
            <parameters>
                <includeLanguage>False</includeLanguage>
                <includePort>False</includePort>
            </parameters>
        </component>

        <component
                id="UcommercePathService"
                service="Ucommerce.Infrastructure.Runtime.IPathService, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Runtime.UcommercePathService, Ucommerce.Infrastructure"/>

        <component
                id="CallbackUrl"
                service="Ucommerce.Web.ICallbackUrl, Ucommerce"
                type="Ucommerce.Web.Impl.CallbackUrl, Ucommerce"/>

        <component
                id="RequestPaymentUrl"
                service="Ucommerce.Web.IRequestPaymentUrl, Ucommerce"
                type="Ucommerce.Web.Impl.RequestPaymentUrl, Ucommerce"/>

        <component
                id="AppsService"
                service="Ucommerce.Apps.IAppsService, Ucommerce"
                type="Ucommerce.Apps.AppsService, Ucommerce"/>

        <component
                id="ProductPriceCalculationService"
                service="Ucommerce.Catalog.IProductPriceCalculationService, Ucommerce"
                type="Ucommerce.Catalog.Impl.ProductPriceCalculationService, Ucommerce"/>

        <!-- Product Price queries-->
        <component
                id="ProductPriceQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductPriceQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductPriceQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.DiscountAppliedProductPriceQuery, Ucommerce.NHibernate"/>
		
        <!-- Promo code queries -->
        <component
		        id="InsertPromoCodesQuery"
		        service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.InsertPromoCodesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.InsertPromoCodesQueryResult, Ucommerce]]"
		        type="Ucommerce.NHibernate.Impl.InsertPromoCodesQuery, Ucommerce.NHibernate"/>
        <component
		        id="DeleteAllDuplicateVoucherCodesQuery"
		        service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DeleteAllDuplicateVoucherCodesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.DeleteAllDuplicateVoucherCodesQueryResult, Ucommerce]]"
		        type="Ucommerce.NHibernate.Impl.DeleteAllDuplicateVoucherCodesQuery, Ucommerce.NHibernate"/>

		<!-- Product Price queries-->
        <component
                id="NoDiscountProductPriceQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductPriceQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductPriceQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductPriceQuery, Ucommerce.NHibernate"/>

        <component
                id="DashboardOverviewQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DashboardOverviewQueryArgs, Ucommerce][Ucommerce.Catalog.Models.DashboardOverviewQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.DashboardOverviewQuery, Ucommerce.NHibernate"/>

        <component
                id="BasketConversionQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DashboardOverviewQueryArgs, Ucommerce][Ucommerce.Catalog.Models.BasketConversionQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.BasketConversionQuery, Ucommerce.NHibernate"/>

        <!-- Infrastructure -->
        <component
                id="WebRuntimeInspector"
                service="Ucommerce.Infrastructure.Environment.IWebRuntimeInspector, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Environment.WebRuntimeInspector, Ucommerce.Infrastructure"/>

        <!-- Shell services -->
        <component
                id="TreeServiceShell"
                service="Ucommerce.Tree.ITreeContentService, Ucommerce"
                type="Ucommerce.Tree.Impl.TreeContentService, Ucommerce">
            <parameters>
                <RootNodeType>root</RootNodeType>
                <RootNodeHasAutoLoad>true</RootNodeHasAutoLoad>
                <RootNodeHasChildren>true</RootNodeHasChildren>
                <RootNodeName>Ucommerce</RootNodeName>
                <RootNodeIcon>Ucommerce-logo-icon.svg</RootNodeIcon>
                <RootNodeItemGuid>3806A967-DD30-421F-A835-7D8DE80054B9</RootNodeItemGuid>
                <RootNodeId>-1</RootNodeId>
                <RootNodeParentId>10</RootNodeParentId>
                <contentProviders>
                    <list type="Ucommerce.Tree.ITreeContentProvider, Ucommerce">
                        <item>${DefaultDashboardSectionProvider}</item>
                        <item>${DefaultStoresSectionProvider}</item>
                        <item>${DefaultCatalogsSectionProvider}</item>
                        <item>${DefaultProductsSectionProvider}</item>
                        <item>${DefaultCatalogSearchItemProvider}</item>
                        <item>${DefaultOrdersSectionProvider}</item>
                        <item>${DefaultPromotionsSectionProvider}</item>
                        <item>${DefaultAnalyticsSectionProvider}</item>
                        <item>${DefaultAppsRootSectionProvider}</item>
                        <item>${DefaultRootSectionProvider}</item>
                        <item>${DefaultSettingsAppsProvider}</item>
                        <item>${DefaultSettingsAppsInstallerProvider}</item>
                        <item>${DefaultSettingsAppsInstalledProvider}</item>
                        <item>${DefaultSettingsRootSectionProvider}</item>
                        <item>${DefaultSettingsCatalogProvider}</item>
                        <item>${DefaultSettingsOrdersProvider}</item>
                        <item>${DefaultSettingsEmailsProvider}</item>
                        <item>${DefaultSettingsDefinitionsProvider}</item>
                        <item>${DefaultSettingsSecurityProvider}</item>
                    </list>
                </contentProviders>
            </parameters>
        </component>

        <component
                id="DefaultCatalogsSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.CatalogsSectionProvider, Ucommerce"/>

        <component
                id="DefaultProductsSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.ProductsSectionProvider, Ucommerce"/>

        <component
                id="DefaultRootSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsRootSectionsProvider, Ucommerce"/>

        <component
                id="DefaultDashboardSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.DashboardSectionProvider, Ucommerce"/>

        <component
                id="DefaultStoresSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.StoresSectionProvider, Ucommerce"/>

        <component
                id="DefaultCatalogSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.CatalogSectionProvider, Ucommerce">
            <parameters>
                <considerProductsAsChildren>true</considerProductsAsChildren>
            </parameters>
        </component>

        <component
                id="DefaultCatalogSearchItemProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.CatalogSearchNodeProvider, Ucommerce">
        </component>

        <component
                id="DefaultShellCatalogSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.CatalogSectionProvider, Ucommerce">
            <parameters>
                <considerProductsAsChildren>false</considerProductsAsChildren>
            </parameters>
        </component>

        <component
                id="DefaultProductSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.ProductSectionProvider, Ucommerce"/>

        <component
                id="DefaultOrdersSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.OrdersSectionProvider, Ucommerce"/>

        <component
                id="DefaultPromotionsSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.PromotionsSectionProvider, Ucommerce"/>

        <component
                id="DefaultAnalyticsSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.AnalyticsSectionProvider, Ucommerce"/>

        <component
                id="DefaultSettingsRootSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsRootSectionProvider, Ucommerce"/>

        <component
                id="DefaultSettingsCatalogProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsCatalogProvider, Ucommerce"/>

        <component
                id="DefaultSettingsOrdersProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsOrdersProvider, Ucommerce"/>

        <component
                id="DefaultSettingsEmailsProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsEmailsProvider, Ucommerce"/>

        <component
                id="DefaultSettingsDefinitionsProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsDefinitionsProvider, Ucommerce"/>

        <component
                id="DefaultSettingsSecurityProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsSecurityProvider, Ucommerce"/>

        <component
                id="DefaultAppsRootSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.AppsRootSectionProvider, Ucommerce"/>

        <component
                id="DefaultSettingsAppsProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsAppsProvider, Ucommerce"/>

        <component
                id="DefaultSettingsAppsInstalledProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsAppsInstalledProvider, Ucommerce"/>


        <component
                id="DefaultSettingsAppsInstallerProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.SettingsAppsInstallerProvider, Ucommerce"/>

        <component
                id="WebRuntimeInspector"
                service="Ucommerce.Infrastructure.Environment.IWebRuntimeInspector, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Environment.WebRuntimeInspector, Ucommerce.Infrastructure"/>

        <component
                id="TreeNodeConverterService"
                service="Ucommerce.Web.ITreeNodeContentToTreeNodeConverter, Ucommerce"
                type="Ucommerce.Web.Impl.TreeNodeContentToTreeNodeConverter, Ucommerce">
            <parameters>
                <urlConverters>
                    <list type="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce">
                        <item>${DefaultUrlConverter}</item>
                        <item>${AppActionUrlConverter}</item>
                        <item>${ActionUrlConverter}</item>
                    </list>
                </urlConverters>
                <optionConverters>
                    <list type="Ucommerce.Tree.ITreeNodeOptionToOptionItemConverter, Ucommerce">
                        <item>${DefaultOptionConverter}</item>
                    </list>
                </optionConverters>
            </parameters>
        </component>

        <component
                id="DefaultUrlConverter"
                service="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce"
                type="Ucommerce.Tree.Impl.Converters.TreeNodeTypeToUrlConverter, Ucommerce"/>

        <component
                id="AppActionUrlConverter"
                service="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce"
                type="Ucommerce.Tree.Impl.Converters.TreeNodeAppActionToUrlConverter, Ucommerce"/>

        <component
                id="ActionUrlConverter"
                service="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce"
                type="Ucommerce.Tree.Impl.Converters.TreeNodeActionToUrlConverter, Ucommerce"/>

        <component
                id="DefaultOptionConverter"
                service="Ucommerce.Tree.ITreeNodeOptionToOptionItemConverter, Ucommerce"
                type="Ucommerce.Tree.Impl.Converters.TreeNodeOptionToOptionItemConverter, Ucommerce"/>

        <!-- TreeNodeService providers-->
        <component id="TreeNodeServiceProvider"
                   service="Ucommerce.Web.ITreeNodeServiceProvider, Ucommerce"
                   type="Ucommerce.Web.Impl.TreeNodeServiceProvider, Ucommerce">
        </component>

        <component id="CatalogNodeService"
                   service="Ucommerce.Web.ITreeNodeService, Ucommerce"
                   type="Ucommerce.Web.Impl.ContentNodeService, Ucommerce">
            <parameters>
                <serviceType>Catalog</serviceType>
                <treeNodeContentToTreeNodeConverter>${TreeNodeConverterService}</treeNodeContentToTreeNodeConverter>
                <treeContentService>${CatalogTreeService}</treeContentService>
            </parameters>
        </component>

        <component id="TreeNodeService" service="Ucommerce.Web.ITreeNodeService, Ucommerce"
                   type="Ucommerce.Web.Impl.ContentNodeService, Ucommerce">
            <parameters>
                <serviceType>Tree</serviceType>
                <treeNodeContentToTreeNodeConverter>${TreeNodeConverterService}</treeNodeContentToTreeNodeConverter>
                <treeContentService>${TreeServiceShell}</treeContentService>
            </parameters>
        </component>

        <component
                id="CatalogTreeService"
                service="Ucommerce.Tree.ITreeContentService, Ucommerce"
                type="Ucommerce.Tree.Impl.TreeContentService, Ucommerce">
            <parameters>
                <RootNodeType>root</RootNodeType>
                <RootNodeHasAutoLoad>true</RootNodeHasAutoLoad>
                <RootNodeHasChildren>true</RootNodeHasChildren>
                <RootNodeName>Ucommerce</RootNodeName>
                <RootNodeIcon>Ucommerce-logo-icon.png</RootNodeIcon>
                <RootNodeItemGuid>3806A967-DD30-421F-A835-7D8DE80054B9</RootNodeItemGuid>
                <RootNodeId>-1</RootNodeId>
                <RootNodeParentId>10</RootNodeParentId>
                <contentProviders>
                    <list type="Ucommerce.Tree.ITreeContentProvider, Ucommerce">
                        <item>${DefaultShellCatalogSectionProvider}</item>
                    </list>
                </contentProviders>
            </parameters>
        </component>

        <component id="ProductNodeService"
                   service="Ucommerce.Web.ITreeNodeService, Ucommerce"
                   type="Ucommerce.Web.Impl.ContentNodeService, Ucommerce">
            <parameters>
                <serviceType>Products</serviceType>
                <treeNodeContentToTreeNodeConverter>${TreeNodeConverterService}</treeNodeContentToTreeNodeConverter>
                <treeContentService>${CatalogProductTreeService}</treeContentService>
            </parameters>
        </component>

        <component
                id="CatalogProductTreeService"
                service="Ucommerce.Tree.ITreeContentService, Ucommerce"
                type="Ucommerce.Tree.Impl.TreeContentService, Ucommerce">
            <parameters>
                <RootNodeType>root</RootNodeType>
                <RootNodeHasAutoLoad>true</RootNodeHasAutoLoad>
                <RootNodeHasChildren>true</RootNodeHasChildren>
                <RootNodeName>Ucommerce</RootNodeName>
                <RootNodeIcon>Ucommerce-logo-icon.png</RootNodeIcon>
                <RootNodeItemGuid>3806A967-DD30-421F-A835-7D8DE80054B9</RootNodeItemGuid>
                <RootNodeId>-1</RootNodeId>
                <RootNodeParentId>10</RootNodeParentId>
                <contentProviders>
                    <list type="Ucommerce.Tree.ITreeContentProvider, Ucommerce">
                        <item>${DefaultCatalogSectionProvider}</item>
                        <item>${DefaultProductSectionProvider}</item>
                    </list>
                </contentProviders>
            </parameters>
        </component>

        <component id="DefinitionNodeService"
                   service="Ucommerce.Web.ITreeNodeService, Ucommerce"
                   type="Ucommerce.Web.Impl.ContentNodeService, Ucommerce">
            <parameters>
                <serviceType>Definition</serviceType>
                <treeNodeContentToTreeNodeConverter>${TreeNodeConverterService}</treeNodeContentToTreeNodeConverter>
                <treeContentService>${DefinitionTreeService}</treeContentService>
            </parameters>
        </component>

        <component
                id="DefinitionTreeService"
                service="Ucommerce.Tree.ITreeContentService, Ucommerce"
                type="Ucommerce.Tree.Impl.TreeContentService, Ucommerce">
            <parameters>
                <RootNodeType>root</RootNodeType>
                <RootNodeHasAutoLoad>true</RootNodeHasAutoLoad>
                <RootNodeHasChildren>true</RootNodeHasChildren>
                <RootNodeName>Ucommerce</RootNodeName>
                <RootNodeIcon>Ucommerce-logo-icon.png</RootNodeIcon>
                <RootNodeItemGuid>3806A967-DD30-421F-A835-7D8DE80054B9</RootNodeItemGuid>
                <RootNodeId>-1</RootNodeId>
                <RootNodeParentId>10</RootNodeParentId>
                <contentProviders>
                    <list type="Ucommerce.Tree.ITreeContentProvider, Ucommerce">
                        <item>${DefaultRootSectionProvider}</item>
                        <item>${DefaultSettingsDynamicDefinitionsProvider}</item>
                    </list>
                </contentProviders>
            </parameters>
        </component>

        <component
                id="DefaultSettingsDynamicDefinitionsProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.DefaultSettingsDynamicDefinitionsProvider, Ucommerce">
            <parameters>
                <settingsDefinitionsProvider>${DefaultSettingsDefinitionsProvider}</settingsDefinitionsProvider>
            </parameters>
        </component>

        <component id="CampaignItemNodeService"
                   service="Ucommerce.Web.ITreeNodeService, Ucommerce"
                   type="Ucommerce.Web.Impl.ContentNodeService, Ucommerce">
            <parameters>
                <serviceType>CampaignItem</serviceType>
                <treeNodeContentToTreeNodeConverter>${TreeNodeConverterService}</treeNodeContentToTreeNodeConverter>
                <treeContentService>${MarketingTreeService}</treeContentService>
            </parameters>
        </component>

        <component
                id="MarketingTreeService"
                service="Ucommerce.Tree.ITreeContentService, Ucommerce"
                type="Ucommerce.Tree.Impl.TreeContentService, Ucommerce">
            <parameters>
                <RootNodeType>root</RootNodeType>
                <RootNodeHasAutoLoad>true</RootNodeHasAutoLoad>
                <RootNodeHasChildren>true</RootNodeHasChildren>
                <RootNodeName>Ucommerce</RootNodeName>
                <RootNodeIcon>Ucommerce-logo-icon.png</RootNodeIcon>
                <RootNodeItemGuid>3806A967-DD30-421F-A835-7D8DE80054B9</RootNodeItemGuid>
                <RootNodeId>-1</RootNodeId>
                <RootNodeParentId>10</RootNodeParentId>
                <contentProviders>
                    <list type="Ucommerce.Tree.ITreeContentProvider, Ucommerce">
                        <item>${DefaultPromotionsSectionProvider}</item>
                    </list>
                </contentProviders>
            </parameters>
        </component>

        <!-- List providers to initiate data from a list of preselected values-->
        <component
                id="TreeNodesListProviderFactory"
                service="Ucommerce.Tree.ITreeNodesListProviderFactory, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.TreeNodesListProviderFactory, Ucommerce"/>


        <component
                id="ProductTreeNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.ProductTreeNodesListProvider, Ucommerce"/>

        <component
                id="CategoriesTreeNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.CategoriesTreeNodesListProvider, Ucommerce"/>

        <component
                id="ContentTreeNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.ContentTreeNodesListProvider, Ucommerce"/>

        <component
                id="MediaTreNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.MediaTreeNodesListProvider, Ucommerce"/>

        <component
                id="ProductCatalogGroupTreeNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.ProductCatalogGroupTreeNodesListProvider, Ucommerce"/>

        <component
                id="ProductCatalogTreeNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.ProductCatalogTreeNodesListProvider, Ucommerce"/>

        <component
                id="CampaignItemTreeNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.CampaignItemTreeNodesListProvider, Ucommerce"/>

        <component
                id="DefinitionTreeNodesListProvider"
                service="Ucommerce.Tree.ITreeNodesListProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.DefinitionTreeNodesListProvider, Ucommerce"/>

        <!-- Other -->
        <component
                id="SectionBuilder"
                service="Ucommerce.Presentation.Web.Pages.ITabViewBuilder, Ucommerce.Presentation"
                type="Ucommerce.Presentation.Web.Pages.TabViewBuilder, Ucommerce.Presentation">
            <parameters>
                <DefaultCultureCode>#{defaultCultureCode}</DefaultCultureCode>
            </parameters>
        </component>

        <component
                id="SectionGroupFactory"
                service="Ucommerce.Presentation.Web.Pages.ISectionGroupFactory, Ucommerce.Presentation"
                type="Ucommerce.Presentation.Web.Pages.SectionGroupFactory, Ucommerce.Presentation"/>

        <component
                id="ResourceManager"
                service="Ucommerce.Infrastructure.Globalization.IResourceManager, Ucommerce.Infrastructure"
                type="Ucommerce.Infrastructure.Globalization.GlobalResourceManager, Ucommerce.Infrastructure"/>

        <component
                id="UpdateAuditModifiedData"
                service="Ucommerce.EntitiesV2.Revisions.IUpdateAuditModifiedData, Ucommerce"
                type="Ucommerce.EntitiesV2.Revisions.Impl.UpdateAuditModifiedData, Ucommerce"/>

        <!--- Security -->
        <component
                id="RoleService"
                service="Ucommerce.Security.IRoleService, Ucommerce"
                type="Ucommerce.Security.RoleService, Ucommerce"/>

        <component
                id="EnsureRolesService"
                service="Ucommerce.Security.IEnsureRolesAreUpToDateService, Ucommerce"
                type="Ucommerce.Security.EnsureRolesAreUpToDateService, Ucommerce"/>

        <component
                id="SecurityService"
                service="Ucommerce.Security.ISecurityService, Ucommerce"
                type="Ucommerce.Security.SecurityService, Ucommerce">
            <parameters>
                <Enabled>#{securityFoundationEnabled}</Enabled>
            </parameters>
        </component>

        <component
                id="WidgetService"
                service="Ucommerce.Presentation.UI.IWidgetService, Ucommerce.Presentation"
                type="Ucommerce.Presentation.UI.Impl.WidgetService, Ucommerce.Presentation">
        </component>

        <component
                id="EntityPropertyValueService"
                service="Ucommerce.EntitiesV2.Definitions.IEntityPropertyValueService, Ucommerce"
                type="Ucommerce.EntitiesV2.Definitions.EntityPropertyValueService, Ucommerce"/>

        <component
                id="DataTypeDefinitionInspector"
                service="Ucommerce.EntitiesV2.Definitions.IDataTypeDefinitionInspector, Ucommerce"
                type="Ucommerce.EntitiesV2.Definitions.DataTypeDefinitionInspector, Ucommerce"/>

        <!-- Services -->
        <component
                id="DefinitionGraphService"
                service="Ucommerce.Services.IDefinitionGraphService, Ucommerce"
                type="Ucommerce.Services.Impl.DefinitionGraphService, Ucommerce"/>

        <!-- Currency Conversion Service -->
        <component
                id="CurrencyConversionService"
                service="Ucommerce.Transactions.ICurrencyConversionService, Ucommerce"
                type="Ucommerce.Transactions.CurrencyConversionService, Ucommerce"/>


        <!-- Feed Service -->
        <component
                id="FeedService"
                service="Ucommerce.Dashboard.IFeedService, Ucommerce"
                type="Ucommerce.Dashboard.Impl.InMemoryFeed, Ucommerce">
            <parameters>
                <FeedSize>20</FeedSize>
            </parameters>
        </component>


        <!--Currency Exchange Rate Service -->
        <component
                id="CurrencyExchangeRateService"
                service="Ucommerce.Catalog.ICurrencyExchangeRateService, Ucommerce"
                type="Ucommerce.Catalog.Impl.DefaultCurrencyExchangeRateService, Ucommerce"/>

        <component
                id="ExchangeRateQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ExchangeRateQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ExchangeRateQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ExchangeRateQuery, Ucommerce.NHibernate"/>


        <!-- ProductCatalogBuiltInPropertiesQuery -->
        <component
                id="ProductCatalogBuiltInPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductCatalogBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductCatalogBuiltInPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductCatalogBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

        <!-- CategoryBuiltInPropertiesQuery -->
        <component
                id="CategoryBuiltInPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CategoryBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CategoryBuiltInPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.CategoryBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

        <!-- PriceGroupsQuery -->
        <component
                id="PriceGroupsQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.PriceGroupsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.PriceGroupsQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.PriceGroupsQuery, Ucommerce.NHibernate"/>

        <!-- DefinitionsForTypeQuery -->
        <component
                id="DefinitionsForTypeQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DefinitionsForTypeQueryArgs, Ucommerce][Ucommerce.Catalog.Models.DefinitionsForTypeQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.DefinitionsForTypeQuery, Ucommerce.NHibernate"/>

        <!-- CategoriesQuery -->
        <component
                id="CategoriesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CategoriesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CategoriesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.CategoriesQuery, Ucommerce.NHibernate"/>

        <!-- CatalogsQuery -->
        <component
                id="CatalogsQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CatalogsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CatalogsQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.CatalogsQuery, Ucommerce.NHibernate"/>
                
        <component
                id="ProductCatalogGroupsBuiltinPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductCatalogGroupsBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductCatalogGroupsBuiltInPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductCatalogGroupsBuiltInPropertiesQuery, Ucommerce.NHibernate"/>
                
        <component
                id="ProductCatalogGroupBuiltinPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductCatalogGroupBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductCatalogGroupBuiltInPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductCatalogGroupBuiltInPropertiesQuery, Ucommerce.NHibernate"/>
                
        <component
                id="CampaignItemBuiltInPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CampaignItemBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CampaignItemBuiltInPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.CampaignItemBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

        <!-- Tree Service for listing all Catalogs-->
        <component
                id="CatalogsRootSectionProvider"
                service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
                type="Ucommerce.Tree.Impl.Providers.CatalogsRootSectionProvider, Ucommerce"/>

        <component
                id="CatalogBuilderCatalogsTreeService"
                service="Ucommerce.Tree.ITreeContentService, Ucommerce"
                type="Ucommerce.Tree.Impl.TreeContentService, Ucommerce">
            <parameters>
                <RootNodeType>root</RootNodeType>
                <RootNodeHasAutoLoad>true</RootNodeHasAutoLoad>
                <RootNodeHasChildren>true</RootNodeHasChildren>
                <RootNodeName>Product Catalogs</RootNodeName>
                <RootNodeIcon>fa fa-folder-open</RootNodeIcon>
                <RootNodeItemGuid>3806A967-DD30-421F-A835-7D8DE80054B9</RootNodeItemGuid>
                <RootNodeId>-1</RootNodeId>
                <RootNodeParentId>-1</RootNodeParentId>
                <contentProviders>
                    <list type="Ucommerce.Tree.ITreeContentProvider, Ucommerce">
                        <item>${CatalogsRootSectionProvider}</item>
                    </list>
                </contentProviders>
            </parameters>
        </component>

        <component id="TreeNodeServiceCatalogBuilderCatalogs"
                   service="Ucommerce.Web.ITreeNodeService, Ucommerce"
                   type="Ucommerce.Web.Impl.ContentNodeService, Ucommerce">
            <parameters>
                <serviceType>CatalogBuilderCatalogs</serviceType>
                <treeNodeContentToTreeNodeConverter>${TreeNodeConverterService}</treeNodeContentToTreeNodeConverter>
                <treeContentService>${CatalogBuilderCatalogsTreeService}</treeContentService>
            </parameters>
        </component>

        <component
                id="CreateProduct"
                service="Ucommerce.Catalog.ICreateProduct, Ucommerce"
                type="Ucommerce.Catalog.Impl.CreateProduct, Ucommerce">
        </component>

        <component id="ProductFactory"
                   service="Ucommerce.EntitiesV2.Factories.IProductFactory, Ucommerce"
                   type="Ucommerce.EntitiesV2.Factories.ProductFactory, Ucommerce"/>

        <component
                id="CreateCategory"
                service="Ucommerce.Catalog.ICreateCategory, Ucommerce"
                type="Ucommerce.Catalog.Impl.CreateCategory, Ucommerce">
            <parameters>
                <EnforceCategoryNameUniquenessWithinCatalogs>#{enforceCategoryNameUniquenessWithinCatalogs}
                </EnforceCategoryNameUniquenessWithinCatalogs>
                <SaveCategoryPipeline>${SaveCategory}</SaveCategoryPipeline>
            </parameters>
        </component>

        <component id="CategoryFactory"
                   service="Ucommerce.EntitiesV2.Factories.ICategoryFactory, Ucommerce"
                   type="Ucommerce.EntitiesV2.Factories.CategoryFactory, Ucommerce"/>

        <!-- SortProductCatalogs -->
        <component
                id="SortProductCatalogs"
                service="Ucommerce.Catalog.ISortProductCatalogs, Ucommerce"
                type="Ucommerce.Catalog.Impl.SortProductCatalogs, Ucommerce">
            <parameters>
                <SaveProductCatalogPipeline>${SaveProductCatalog}</SaveProductCatalogPipeline>
            </parameters>
        </component>

        <!-- SortCategories -->
        <component
                id="SortCategories"
                service="Ucommerce.Catalog.ISortCategories, Ucommerce"
                type="Ucommerce.Catalog.Impl.SortCategories, Ucommerce">
            <parameters>
                <SaveCategoryPipeline>${SaveCategory}</SaveCategoryPipeline>
            </parameters>
        </component>

        <!-- MoveCategory -->
        <component
                id="MoveCategory"
                service="Ucommerce.Catalog.IMoveCategory, Ucommerce"
                type="Ucommerce.Catalog.Impl.MoveCategory, Ucommerce">
            <parameters>
                <SaveProductCatalogPipeline>${SaveProductCatalog}</SaveProductCatalogPipeline>
            </parameters>
        </component>

        <!-- Normalize Sort Orders-->
        <component
                id="NormalizePromotionsPriorityOrderQuery"
                service="Ucommerce.IQuery`1[[System.Boolean, mscorlib]], Ucommerce"
                type="Ucommerce.NHibernate.Impl.NormalizePromotionsPriorityOrderQuery, Ucommerce.NHibernate"/>

        <component
                id="NormalizeCampaignsPriorityOrderQuery"
                service="Ucommerce.IQuery`1[[System.Boolean, mscorlib]], Ucommerce"
                type="Ucommerce.NHibernate.Impl.NormalizeCampaignsPriorityOrderQuery, Ucommerce.NHibernate"/>

        <component
                id="NormalizeCatalogSortOrderQuery"
                service="Ucommerce.IQuery`1[[System.Boolean, mscorlib]], Ucommerce"
                type="Ucommerce.NHibernate.Impl.NormalizeCatalogSortOrderQuery, Ucommerce.NHibernate"/>

        <component
                id="NormalizeCategorySortOrderQuery"
                service="Ucommerce.IQuery`1[[System.Boolean, mscorlib]]"
                type="Ucommerce.NHibernate.Impl.NormalizeCategorySortOrderQuery, Ucommerce.NHibernate"/>

        <component
                id="NormalizeCategoryProductSortOrderQuery"
                service="Ucommerce.IQuery`1[[System.Boolean, mscorlib]]"
                type="Ucommerce.NHibernate.Impl.NormalizeCategoryProductSortOrderQuery, Ucommerce.NHibernate"/>

        <!-- Dynamic Properties-->
        <component
                id="DynamicPropertiesService"
                service="Ucommerce.Catalog.IDynamicPropertiesService, Ucommerce"
                type="Ucommerce.Catalog.Impl.DynamicPropertiesService, Ucommerce">
            <parameters>
                <DynamicPropertyProviders>
                    <list type="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce">
                        <item>${ProductCatalogDynamicPropertyProvider}</item>
                        <item>${DataTypeDynamicPropertyProvider}</item>
                        <item>${CategoryDynamicPropertyProvider}</item>
                    </list>
                </DynamicPropertyProviders>
            </parameters>
        </component>

        <component
                id="ProductCatalogDynamicPropertyProvider"
                service="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce"
                type="Ucommerce.Catalog.Impl.ProductCatalogDynamicPropertyProvider, Ucommerce">
            <parameters>
                <ProductCatalogPropertiesQuery>${ProductCatalogPropertiesQuery}</ProductCatalogPropertiesQuery>
            </parameters>
        </component>

        <component
                id="DataTypeDynamicPropertyProvider"
                service="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce"
                type="Ucommerce.Catalog.Impl.DataTypeDynamicPropertyProvider, Ucommerce">
            <parameters>
                <DataTypePropertiesQuery>${DataTypePropertiesQuery}</DataTypePropertiesQuery>
            </parameters>
        </component>

        <component
                id="CategoryDynamicPropertyProvider"
                service="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce"
                type="Ucommerce.Catalog.Impl.CategoryDynamicPropertyProvider, Ucommerce">
            <parameters>
                <CategoryPropertiesQuery>${CategoryPropertiesQuery}</CategoryPropertiesQuery>
            </parameters>
        </component>

        <!-- ProductCatalogPropertiesQuery -->
        <component
                id="ProductCatalogPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntityPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntityPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductCatalogPropertiesQuery, Ucommerce.NHibernate">
            <parameters>
                <EntityPropertiesQuery>${EntityPropertiesQuery}</EntityPropertiesQuery>
            </parameters>
        </component>

        <!-- DataTypePropertiesQuery -->
        <component
                id="DataTypePropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntityPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntityPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.DataTypePropertiesQuery, Ucommerce.NHibernate">
            <parameters>
                <EntityPropertiesQuery>${EntityPropertiesQuery}</EntityPropertiesQuery>
            </parameters>
        </component>

		<!-- ProductRelationsQuery -->

        <component
                id="ProductRelationsQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.RelatedProductsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.RelatedProductsQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.RelatedProductsQuery, Ucommerce.NHibernate"/>

        <!-- CategoryPropertiesQuery -->
        <component
                id="CategoryPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CategoryPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CategoryPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.CategoryPropertiesQuery, Ucommerce.NHibernate"/>

        <!-- EntityPropertiesQuery -->
        <component
                id="EntityPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntityPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntityPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.EntityPropertiesQuery, Ucommerce.NHibernate"/>

        <!-- DefinitionFieldsQuery -->
        <component
                id="DefinitionFieldsQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DefinitionFieldsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.DefinitionFieldsQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.DefinitionFieldsQuery, Ucommerce.NHibernate"/>

        <component
                id="OptionsAndSelectedValuesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.OptionsAndSelectedValuesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.OptionsAndSelectedValuesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.OptionsAndSelectedValuesQuery, Ucommerce.NHibernate"/>

        <component
                id="CategoryValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.Category, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.CategoryValidator, Ucommerce.SystemHttp">
            <parameters>
                <EnforceCategoryNameUniquenessWithinCatalogs>#{enforceCategoryNameUniquenessWithinCatalogs}
                </EnforceCategoryNameUniquenessWithinCatalogs>
            </parameters>
        </component>
        <component
                id="CategoryDescriptionValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.CategoryDescription, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.CategoryDescriptionValidator, Ucommerce.SystemHttp">
        </component>

        <component
                id="CatalogValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.ProductCatalog, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.CatalogValidator, Ucommerce.SystemHttp">
        </component>
        <component
                id="CatalogDescriptionValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.ProductCatalogDescription, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.CatalogDescriptionValidator, Ucommerce.SystemHttp">
        </component>

        <component
                id="ProductValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.Product, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.ProductValidator, Ucommerce.SystemHttp">
        </component>

        <component
                id="VariantValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.Product, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.VariantValidator, Ucommerce.SystemHttp">
            <parameters>
                <ProductValidator>${ProductValidator}</ProductValidator>
            </parameters>
        </component>

        <component
                id="ProductDescriptionValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.ProductDescription, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.ProductDescriptionValidator, Ucommerce.SystemHttp">
        </component>

        <component
                id="StoreValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.ProductCatalogGroup, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.StoreValidator, Ucommerce.SystemHttp">
        </component>

        <component
                id="CampaignValidator"
                service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.Campaign, Ucommerce]], FluentValidation"
                type="Ucommerce.SystemHttp.Validators.CampaignValidator, Ucommerce.SystemHttp">
        </component>

        <component
                id="ProductDefinitionsAndDefinitionFieldsQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductDefinitionsAndDefinitionFieldsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductDefinitionsAndDefinitionFieldsQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductDefinitionsAndDefinitionFieldsQuery, Ucommerce.NHibernate"/>
        
        <component
                id="EntityDefinitionsAndDefinitionFieldsQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntityDefinitionsAndDefinitionFieldsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntityDefinitionsAndDefinitionFieldsQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.EntityDefinitionsAndDefinitionFieldsQuery, Ucommerce.NHibernate"/>
        
        <component
                id="EntitiesPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntitiesPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntitiesPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.EntitiesPropertiesQuery, Ucommerce.NHibernate"/> 
                
        <component
                id="CampaignItemsPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CampaignItemsPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CampaignItemsPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.CampaignItemsPropertiesQuery, Ucommerce.NHibernate"/>

        <component
                id="ProductsBuiltInPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsBuiltInPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductsBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

        <component
	        id="ProductSkuUpdateQuery"
	        service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductSkuUpdateQueryArgs, Ucommerce][System.Boolean, mscorlib]]"
	        type="Ucommerce.NHibernate.Impl.ProductSkuUpdateQuery, Ucommerce.NHibernate"/>

        <component
                id="ProductBuiltInPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductBuiltInPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

        <component
                id="ProductsPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductsPropertiesQuery, Ucommerce.NHibernate"/>

        <component
                id="ProductPropertiesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductPropertiesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductPropertiesQuery, Ucommerce.NHibernate"/>

        <component
                id="ProductsByGuidQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsByGuidQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsByGuidQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductsByGuidQuery, Ucommerce.NHibernate"/>

        <component
                id="ProductsUnitPriceQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsUnitPriceQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsUnitPriceQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.ProductsUnitPriceQuery, Ucommerce.NHibernate"/>

        <component
                id="DeletePromoCodesQuery"
                service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DeletePromoCodesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.DeletePromoCodesQueryResult, Ucommerce]]"
                type="Ucommerce.NHibernate.Impl.DeletePromoCodesQuery, Ucommerce.NHibernate"/>

        <component
                id="CreateCatalog"
                service="Ucommerce.Catalog.ICreateCatalog, Ucommerce"
                type="Ucommerce.Catalog.Impl.CreateCatalog, Ucommerce"/>

        <component
                id="UpdateEntityProperty"
                service="Ucommerce.Catalog.IUpdateEntityProperty, Ucommerce"
                type="Ucommerce.Catalog.Impl.UpdateEntityProperty, Ucommerce"/>

        <component
                id="CreateStore"
                service="Ucommerce.Catalog.ICreateStore, Ucommerce"
                type="Ucommerce.Catalog.Impl.CreateStore, Ucommerce"/>

        <component
                id="QueryBuilderBase"
                service="Ucommerce.NHibernate.Impl.QueryBuilder.IQueryBuilder, Ucommerce.NHibernate"
                type="Ucommerce.NHibernate.Impl.QueryBuilder.QueryBuilder, Ucommerce.NHibernate"/>

		</components>
		
</configuration>
